/*
 *============================================================================================================*
 * Name        : RCC_Interface.h	  																			  *
 * Module Name : RCC Peripheral																				  *
 * Author      : Alfred Nagy Alfred                                                                           * 
 * Date        : 12 Aug 2024                                                                                  * 
 * Description : Interface Header file for the RCC peripheral 													  *
 *============================================================================================================* 
 **/

//#include "RCC_Prv.h"

#ifndef RCC_Interface_h
#define RCC_Interface_h

/*
======================================================================================================================================================


											ENUM FOR CONFIGS


======================================================================================================================================================
 */


typedef enum
{
	PLL_HSI,
	PLL_HSE

}PLLM_SRC_TypeDef;

typedef enum
{
	PLLM2=2 , PLLM3, PLLM4, PLLM5, PLLM6, PLLM7, PLLM8, PLLM9, PLLM10, PLLM11, PLLM12, PLLM13, PLLM14, PLLM15,
	PLLM16, PLLM17, PLLM18, PLLM19, PLLM20, PLLM21, PLLM22, PLLM23, PLLM24, PLLM25, PLLM26, PLLM27, PLLM28, PLLM29,
	PLLM30, PLLM31, PLLM32, PLLM33, PLLM34, PLLM35, PLLM36, PLLM37, PLLM38, PLLM39, PLLM40, PLLM41, PLLM42, PLLM43,
	PLLM44, PLLM45, PLLM46, PLLM47, PLLM48, PLLM49, PLLM50, PLLM51, PLLM52, PLLM53, PLLM54, PLLM55, PLLM56, PLLM57,
	PLLM58, PLLM59, PLLM60, PLLM61, PLLM62, PLLM63

}PLLM_DIVISOR_TypeDef;

typedef enum
{
	PLLN50=50 ,PLLN51, PLLN52, PLLN53, PLLN54, PLLN55, PLLN56, PLLN57, PLLN58, PLLN59, PLLN60, PLLN61, PLLN62, PLLN63, PLLN64,
	PLLN65, PLLN66, PLLN67, PLLN68, PLLN69, PLLN70, PLLN71, PLLN72, PLLN73, PLLN74, PLLN75, PLLN76, PLLN77, PLLN78, PLLN79, PLLN80,
	PLLN81, PLLN82, PLLN83, PLLN84, PLLN85, PLLN86, PLLN87, PLLN88, PLLN89, PLLN90, PLLN91, PLLN92, PLLN93, PLLN94, PLLN95, PLLN96,
	PLLN97, PLLN98, PLLN99, PLLN100, PLLN101, PLLN102, PLLN103, PLLN104, PLLN105, PLLN106, PLLN107, PLLN108, PLLN109, PLLN110,
	PLLN111, PLLN112, PLLN113, PLLN114, PLLN115, PLLN116, PLLN117, PLLN118, PLLN119, PLLN120, PLLN121, PLLN122, PLLN123, PLLN124,
	PLLN125, PLLN126, PLLN127, PLLN128, PLLN129, PLLN130, PLLN131, PLLN132, PLLN133, PLLN134, PLLN135, PLLN136, PLLN137, PLLN138,
	PLLN139, PLLN140, PLLN141, PLLN142, PLLN143, PLLN144, PLLN145, PLLN146, PLLN147, PLLN148, PLLN149, PLLN150, PLLN151, PLLN152,
	PLLN153, PLLN154, PLLN155, PLLN156, PLLN157, PLLN158, PLLN159, PLLN160, PLLN161, PLLN162, PLLN163, PLLN164, PLLN165, PLLN166,
	PLLN167, PLLN168, PLLN169, PLLN170, PLLN171, PLLN172, PLLN173, PLLN174, PLLN175, PLLN176, PLLN177, PLLN178, PLLN179, PLLN180,
	PLLN181, PLLN182, PLLN183, PLLN184, PLLN185, PLLN186, PLLN187, PLLN188, PLLN189, PLLN190, PLLN191, PLLN192, PLLN193, PLLN194,
	PLLN195, PLLN196, PLLN197, PLLN198, PLLN199, PLLN200, PLLN201, PLLN202, PLLN203, PLLN204, PLLN205, PLLN206, PLLN207, PLLN208,
	PLLN209, PLLN210, PLLN211, PLLN212, PLLN213, PLLN214, PLLN215, PLLN216, PLLN217, PLLN218, PLLN219, PLLN220, PLLN221, PLLN222,
	PLLN223, PLLN224, PLLN225, PLLN226, PLLN227, PLLN228, PLLN229, PLLN230, PLLN231, PLLN232, PLLN233, PLLN234, PLLN235, PLLN236,
	PLLN237, PLLN238, PLLN239, PLLN240, PLLN241, PLLN242, PLLN243, PLLN244, PLLN245, PLLN246, PLLN247, PLLN248, PLLN249, PLLN250,
	PLLN251, PLLN252, PLLN253, PLLN254, PLLN255, PLLN256, PLLN257, PLLN258, PLLN259, PLLN260, PLLN261, PLLN262, PLLN263, PLLN264,
	PLLN265, PLLN266, PLLN267, PLLN268, PLLN269, PLLN270, PLLN271, PLLN272, PLLN273, PLLN274, PLLN275, PLLN276, PLLN277, PLLN278,
	PLLN279, PLLN280, PLLN281, PLLN282, PLLN283, PLLN284, PLLN285, PLLN286, PLLN287, PLLN288, PLLN289, PLLN290, PLLN291, PLLN292,
	PLLN293, PLLN294, PLLN295, PLLN296, PLLN297, PLLN298, PLLN299, PLLN300, PLLN301, PLLN302, PLLN303, PLLN304, PLLN305, PLLN306,
	PLLN307, PLLN308, PLLN309, PLLN310, PLLN311, PLLN312, PLLN313, PLLN314, PLLN315, PLLN316, PLLN317, PLLN318, PLLN319, PLLN320,
	PLLN321, PLLN322, PLLN323, PLLN324, PLLN325, PLLN326, PLLN327, PLLN328, PLLN329, PLLN330, PLLN331, PLLN332, PLLN333, PLLN334,
	PLLN335, PLLN336, PLLN337, PLLN338, PLLN339, PLLN340, PLLN341, PLLN342, PLLN343, PLLN344, PLLN345, PLLN346, PLLN347, PLLN348,
	PLLN349, PLLN350, PLLN351, PLLN352, PLLN353, PLLN354, PLLN355, PLLN356, PLLN357, PLLN358, PLLN359, PLLN360, PLLN361, PLLN362,
	PLLN363, PLLN364, PLLN365, PLLN366, PLLN367, PLLN368, PLLN369, PLLN370, PLLN371, PLLN372, PLLN373, PLLN374, PLLN375, PLLN376,
	PLLN377, PLLN378, PLLN379, PLLN380, PLLN381, PLLN382, PLLN383, PLLN384, PLLN385, PLLN386, PLLN387, PLLN388, PLLN389, PLLN390,
	PLLN391, PLLN392, PLLN393, PLLN394, PLLN395, PLLN396, PLLN397, PLLN398, PLLN399, PLLN400, PLLN401, PLLN402, PLLN403, PLLN404,
	PLLN405, PLLN406, PLLN407, PLLN408, PLLN409, PLLN410, PLLN411, PLLN412, PLLN413, PLLN414, PLLN415, PLLN416, PLLN417, PLLN418,
	PLLN419, PLLN420, PLLN421, PLLN422, PLLN423, PLLN424, PLLN425, PLLN426, PLLN427, PLLN428, PLLN429, PLLN430, PLLN431, PLLN432

}PLLM_N_DIVISOR_Typedef_enum;

typedef enum
{
	PLLP,
	PLLQ,
	PLLR

}PLLM_OPTIONS_OUT_TypeDef;

typedef enum
{
	PLLP_DIV2,PLLP_DIV4,PLLP_DIV6,PLLP_DIV8

}PLLM_P_DIVISOR_TypeDef;

typedef enum
{
	PLLR_DIV2=2,PLLR_DIV3,PLLR_DIV4,PLLR_DIV5,PLLR_DIV6,PLLR_DIV7

}PLLM_R_DIVISOR_TypeDef;

typedef enum
{
	PLLQ_DIV2=2,PLLQ_DIV3,PLLQ_DIV4,PLLQ_DIV5,PLLQ_DIV6,PLLQ_DIV7,PLLQ_DIV8,PLLQ_DIV9,PLLQ_DIV10,PLLQ_DIV11,PLLQ_DIV12,PLLQ_DIV13,PLLQ_DIV14,PLLQ_DIV15

}PLLM_Q_DIVISOR_TypeDef;

typedef enum
{
	SYS_HSI=0,
	SYS_HSE,
	SYS_PLLP,
	SYS_PLLR

}SYS_PLL_SRC_TypeDef;

typedef enum
{
	HSE_not_bypassed,
	HSE_bypassed,

}HSE_BYPASS_CONFIG;

typedef struct
{

	PLLM_SRC_TypeDef PLL_MAIN_Source ;
	PLLM_DIVISOR_TypeDef PLL_Divisor ;
	PLLM_N_DIVISOR_Typedef_enum PLLN_Divisor;
	PLLM_P_DIVISOR_TypeDef PLLP_Divisor;
	PLLM_R_DIVISOR_TypeDef PLLR_Divisor;
	PLLM_Q_DIVISOR_TypeDef PLLQ_Divisor;

	HSE_BYPASS_CONFIG HSE_BYPASS;

}PLL_ALL_CONFIGS;

typedef enum
{
	AHB_NOT_DIV=7,
	AHB_DIV_2,
	AHB_DIV_4,
	AHB_DIV_8,
	AHB_DIV_16,
	AHB_DIV_64,
	AHB_DIV_128,
	AHB_DIV_256,
	AHB_DIV_512

}AHB_PRESCALE_ENUM;

typedef struct
{
	PLL_ALL_CONFIGS  PLL_CONFIG;

	SYS_PLL_SRC_TypeDef SYS_CLOCK_SRC;

	AHB_PRESCALE_ENUM AHB_PRESALE;

}RCC_SYS_CLK_CONFIG;

typedef enum
{
	AHB1_GPIOA,
	AHB1_GPIOB,
	AHB1_GPIOC,
	AHB1_GPIOD,
	AHB1_GPIOE,
	AHB1_GPIOF,
	AHB1_GPIOG,
	AHB1_GPIOH,

	AHB1_CRC=12,

	AHB1_BKPSRAM=18,

	AHB1_DMA1=21,
	AHB1_DMA2,

	AHB1_USB_OTG_HS=29,
	AHB1_USB_OTGHSULPI


}AHB1_ENABLE_POS;

typedef enum
{
	AHB2_DCMI,

	AHB2_USB_OTGFS=7

}AHB2_ENABLE_POS;

typedef enum
{
	AHB3_FMC,

	AHB3_QUAD_SPI

}AHB3_ENABLE_POS;

typedef enum
{
	APB1_TIM2,
	APB1_TIM3,
	APB1_TIM4,
	APB1_TIM5,
	APB1_TIM6,
	APB1_TIM7,

	APB1_TIM12,
	APB1_TIM13,
	APB1_TIM14,

	APB1_WWDG=11,

	APB1_SPI2=14,
	APB1_SPI3,

	APB1_SPDIFRX,

	APB1_USART2,
	APB1_USART3,

	APB1_USART4,
	APB1_USART5,

	APB1_I2C1,
	APB1_I2C2,
	APB1_I2C3,

	APB1_FMPI2C1,

	APB1_CAN1,
	APB1_CAN2,

	APB1_CEC,

	APB1_PWR,

	APB1_DAC,

}APB1_ENABLE_POS;

typedef enum
{
	APB2_TIM1,
	APB2_TIM8,

	APB2_USART1=4,
	APB2_USART6,

	APB2_ADC1=8,
	APB2_ADC2,
	APB2_ADC3,

	APB2_SDIO,

	APB2_SPI1,
	APB2_SPI4,

	APB2_SYSCFG,

	APB2_TIM9=16,
	APB2_TIM10,
	APB2_TIM11,

	APB2_SAI1=22,
	APB2_SAI2

}APB2_ENABLE_POS;
typedef enum
{
	HSI__PAA=0,
	HSE__PAA,
	NOT_USED__PAA
}HSE_HSI_OPP_ENUM;
/*
======================================================================================================================================================


										PeriPheral ENABLE

ENABLES SYSTEM CLOCK
***THESE FUNCTION USES PLL CONFIG AND Set SYS Clk TO ACTIVATES PROCESSOR CLOCK

======================================================================================================================================================
 */

//uint8_t RCC_u8SetHseConfig(const HSE_BYPASS_CONFIG HSE_BYPASS,const uint8_t DIV_HSE);

uint8_t RCC_u8SetPllConfig(const PLL_ALL_CONFIGS * const PLL_CONFIG);

uint8_t RCC_u8SetClkSrc(const SYS_PLL_SRC_TypeDef * const CLK_CONFIG);

uint8_t RCC_SetClk_STATUS(const RCC_SYS_CLK_CONFIG * const SYS_CONFIG,const Status_TypeDef Status);

/*
======================================================================================================================================================


										PeriPheral ENABLE

ALL THE FUNCTION
***GETS THE PERIPHERAL NUM , THEN IT USES THE REGISTER TO ENABLE
*** A BIT THAT ALLOW THE CLOCK TO GO THROUGH A SPECIFIC PATH THAT
*** ACTIVATES THE PERIPHERAL

======================================================================================================================================================
 */

/*AHB ENABLE*/
void RCC_AHB1_EN_CLK(const AHB1_ENABLE_POS Pripheral);

void RCC_AHB2_EN_CLK(const AHB2_ENABLE_POS Pripheral);

void RCC_AHB3_EN_CLK(const AHB3_ENABLE_POS Pripheral);

/*APB ENABLE*/
void RCC_APB1_EN_CLK(const APB1_ENABLE_POS Pripheral);

void RCC_APB2_EN_CLK(const APB2_ENABLE_POS Pripheral);

/*
======================================================================================================================================================


										PeriPheral DISABLE

ALL THE FUNCTION

***GETS THE PERIPHERAL NUM , THEN IT USES THE REGISTER TO DISABLE
*** A BIT THAT PREVENTS THE CLOCK TO GO THROUGH A SPECIFIC PATH THAT
*** ACTIVATES THE PERIPHERAL

======================================================================================================================================================
 */

/*AHB DISABLE*/
void RCC_AHB1_DIS_CLK(const AHB1_ENABLE_POS Pripheral);

void RCC_AHB2_DIS_CLK(const AHB2_ENABLE_POS Pripheral);

void RCC_AHB3_DIS_CLK(const AHB3_ENABLE_POS Pripheral);

/*APB DISABLE*/
void RCC_APB1_DIS_CLK(const APB1_ENABLE_POS Pripheral);

void RCC_APB2_DIS_CLK(const APB2_ENABLE_POS Pripheral);


#endif
